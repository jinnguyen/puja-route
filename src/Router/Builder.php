<?php
namespace Puja\Route\Router;
use Puja\Stdlib\Folder\Folder;
use Puja\Stdlib\File;
use Puja\Route\Exception;

class Builder extends RouterAbstract
{
	/**
	 * @var Controller
	 */
	protected $controllerBuilder;
	protected $cachedFile;
	protected function init()
	{
		$this->cachedFile = rtrim($this->config['cache_dir'], DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR . 'routes.php';
		$this->controllerBuilder = new Controller($this->route);
	}

	public function addRoute($route, $controllerCls)
	{
		$route = trim($route, '/');
        $routes = explode('/', $route);
        if (count($routes) > 2) {
            throw new Exception('Sorry, currently we DONT support deep link over 1 sub level (NOT support: root/sublevel1/sublevel2)');
        }

        $controllers = explode('\\', $controllerCls);
        $controllerId = substr(end($controllers), 0, -10);

        $this->controllerBuilder->build($controllerCls, $route, null, $controllerId);
	}

	public function getRoute($uri = null)
	{
		$routeMap = $this->getRoutes();

		if (empty($uri)) {
			return $this->getRouteResponse($uri, $routeMap['']);
		}

		$uri = $this->serializeUri($uri);

		$routes = array_slice(
			explode('/', $uri),
			0, 3
		);

		$count = count($routes);
		for ($i = 0; $i < $count; $i++) {
			$route = implode('/', $routes);
			if (array_key_exists($route, $routeMap)) {
				return $this->getRouteResponse($uri, $routeMap[$route]);
			}
			array_pop($routes);
		}

		return null;
	}

	protected function getRouteResponse($uri, $router)
	{
		return array(
			'uri' => $uri ? '/' . $uri . '/' : '/',
			'params' => $uri ? explode('/', $uri) : null,
			'router' => $router,
		);
	}

	protected function serializeUri($uri)
	{
		if (empty($uri)) {
			return null;
		}

		$uri = strtolower(trim($uri, '/'));
		if (strpos($uri, '//') !== false) {
			$uri = preg_replace('#/+#', '/', $uri);
		}
		$uri = str_replace('-', '', $uri);
		list ($uri) = explode('?', $uri);
		return $uri;
	}

	public function buildRoutes()
	{
		$file = new File\Info($this->cachedFile);
		if ($file->isFile()) {
			return;
		}

        if (!empty($this->config['controller_dir'])) {
            $this->buildFromControllerDir($this->config['controller_dir']);
        }

        if (!empty($this->config['module_dir'])) {
            $folder = $this->getFolder($this->config['module_dir']);
            if ($folder) {
                $modules = $folder->getDirectChildFolders();
                foreach ($modules as $module) {
                    $this->buildFromControllerDir($module . '/Controller/', basename($module));
                }
            }
        }
        
        if (!$this->controllerBuilder->getRoutes()) {
            throw new Exception('There are no controller in your folders, pls check!');
        }

        $fp = $file->openFile('w');
        $fp->fwrite('<?php' . PHP_EOL . '/** Generated by Puja-Route @url: https://github.com/jinnguyen/puja-route */' . PHP_EOL . 'return ' . var_export($this->controllerBuilder->getRoutes(), true) . ';'); 

        return;
	}

	protected function getRoutes()
	{

		$file = new File\Info($this->cachedFile);
		if ($file->isFile()) {
			return include $this->cachedFile;
		}

		throw new Exception('Must call Puja\Route\Route::build() before call Puja\Route\Route::getRoute()');
	}

	protected function buildFromControllerDir($dir, $moduleId = null)
	{
	    if (empty($dir)) {
	        return null;
	    }

	    $folder = $this->getFolder($dir);
	    if (empty($folder)) {
	        return null;
	    }

	    $files = $folder->getChildFiles();
	    if (empty($files)) {
	        return null;
	    }

		$controllerMap = array();
	    foreach ($files as $file) {
	        if (substr($file, -14) != 'Controller.php') {
	            continue;
	        }

	        $controllerId = substr(basename($file), 0, -14);
			if (in_array($controllerId, $this->config['exclude_controller'])) {
				continue;
			}

	        $controllerCls = $this->getControllerCls($moduleId, $controllerId);
			$controllerMap[$controllerId] = $controllerCls;
	    }

		if (empty($controllerMap)) {
			return null;
		}

		if (!empty($controllerMap[$this->config['default_controller']])) {
			$indexElm = array_pop($controllerMap);
			array_unshift($controllerMap, $indexElm);
			$keys = array_keys($controllerMap);
			$keys[0] = $this->config['default_controller'];
			$controllerMap = array_combine($keys, $controllerMap);
		}

		foreach ($controllerMap as $controllerId => $controllerCls) {
			$this->controllerBuilder->build($controllerCls, null, $moduleId, $controllerId);
		}

	}

    protected function getControllerCls($moduleId = null, $controllerId = null)
    {
        if (empty($controllerId)) {
            $controllerId = $this->config['default_controller'];
        }

        if ($moduleId) {
            return rtrim($this->config['root_namespace'], '\\') . '\\Module\\' . $moduleId . '\\Controller\\' . $controllerId . 'Controller';
        }
        return rtrim($this->config['root_namespace'], '\\') . '\\Controller\\' . $controllerId . 'Controller';
    }

    protected function getFolder($path) {
        try {
            return new Folder(rtrim($path, DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR);
        } catch (\Exception $e){
            
        } 

        return null;
    }
}